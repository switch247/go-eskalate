// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"
	Domain "main/Domain"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// TaskRepository is an autogenerated mock type for the TaskRepository type
type TaskRepository struct {
	mock.Mock
}

// CreateTasks provides a mock function with given fields: ctx, task
func (_m *TaskRepository) CreateTasks(ctx context.Context, task *Domain.Task) (Domain.Task, error, int) {
	ret := _m.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for CreateTasks")
	}

	var r0 Domain.Task
	var r1 error
	var r2 int
	if rf, ok := ret.Get(0).(func(context.Context, *Domain.Task) (Domain.Task, error, int)); ok {
		return rf(ctx, task)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *Domain.Task) Domain.Task); ok {
		r0 = rf(ctx, task)
	} else {
		r0 = ret.Get(0).(Domain.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *Domain.Task) error); ok {
		r1 = rf(ctx, task)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *Domain.Task) int); ok {
		r2 = rf(ctx, task)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// DeleteTasksById provides a mock function with given fields: ctx, id, user
func (_m *TaskRepository) DeleteTasksById(ctx context.Context, id primitive.ObjectID, user Domain.OmitedUser) (error, int) {
	ret := _m.Called(ctx, id, user)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTasksById")
	}

	var r0 error
	var r1 int
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, Domain.OmitedUser) (error, int)); ok {
		return rf(ctx, id, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, Domain.OmitedUser) error); ok {
		r0 = rf(ctx, id, user)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, Domain.OmitedUser) int); ok {
		r1 = rf(ctx, id, user)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// GetTasks provides a mock function with given fields: ctx, user
func (_m *TaskRepository) GetTasks(ctx context.Context, user Domain.OmitedUser) ([]*Domain.Task, error, int) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for GetTasks")
	}

	var r0 []*Domain.Task
	var r1 error
	var r2 int
	if rf, ok := ret.Get(0).(func(context.Context, Domain.OmitedUser) ([]*Domain.Task, error, int)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, Domain.OmitedUser) []*Domain.Task); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, Domain.OmitedUser) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(context.Context, Domain.OmitedUser) int); ok {
		r2 = rf(ctx, user)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// GetTasksById provides a mock function with given fields: ctx, id, user
func (_m *TaskRepository) GetTasksById(ctx context.Context, id primitive.ObjectID, user Domain.OmitedUser) (Domain.Task, error, int) {
	ret := _m.Called(ctx, id, user)

	if len(ret) == 0 {
		panic("no return value specified for GetTasksById")
	}

	var r0 Domain.Task
	var r1 error
	var r2 int
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, Domain.OmitedUser) (Domain.Task, error, int)); ok {
		return rf(ctx, id, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, Domain.OmitedUser) Domain.Task); ok {
		r0 = rf(ctx, id, user)
	} else {
		r0 = ret.Get(0).(Domain.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, Domain.OmitedUser) error); ok {
		r1 = rf(ctx, id, user)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(context.Context, primitive.ObjectID, Domain.OmitedUser) int); ok {
		r2 = rf(ctx, id, user)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// UpdateTasksById provides a mock function with given fields: ctx, id, task, user
func (_m *TaskRepository) UpdateTasksById(ctx context.Context, id primitive.ObjectID, task Domain.Task, user Domain.OmitedUser) (Domain.Task, error, int) {
	ret := _m.Called(ctx, id, task, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTasksById")
	}

	var r0 Domain.Task
	var r1 error
	var r2 int
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, Domain.Task, Domain.OmitedUser) (Domain.Task, error, int)); ok {
		return rf(ctx, id, task, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, Domain.Task, Domain.OmitedUser) Domain.Task); ok {
		r0 = rf(ctx, id, task, user)
	} else {
		r0 = ret.Get(0).(Domain.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, Domain.Task, Domain.OmitedUser) error); ok {
		r1 = rf(ctx, id, task, user)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(context.Context, primitive.ObjectID, Domain.Task, Domain.OmitedUser) int); ok {
		r2 = rf(ctx, id, task, user)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// NewTaskRepository creates a new instance of TaskRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskRepository {
	mock := &TaskRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
