// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	Domain "main/Domain"

	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// TaskUseCase is an autogenerated mock type for the TaskUseCase type
type TaskUseCase struct {
	mock.Mock
}

// CreateTasks provides a mock function with given fields: c, task
func (_m *TaskUseCase) CreateTasks(c *gin.Context, task *Domain.Task) (Domain.Task, error, int) {
	ret := _m.Called(c, task)

	if len(ret) == 0 {
		panic("no return value specified for CreateTasks")
	}

	var r0 Domain.Task
	var r1 error
	var r2 int
	if rf, ok := ret.Get(0).(func(*gin.Context, *Domain.Task) (Domain.Task, error, int)); ok {
		return rf(c, task)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *Domain.Task) Domain.Task); ok {
		r0 = rf(c, task)
	} else {
		r0 = ret.Get(0).(Domain.Task)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *Domain.Task) error); ok {
		r1 = rf(c, task)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(*gin.Context, *Domain.Task) int); ok {
		r2 = rf(c, task)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// DeleteTasksById provides a mock function with given fields: c, id, user
func (_m *TaskUseCase) DeleteTasksById(c *gin.Context, id primitive.ObjectID, user Domain.OmitedUser) (error, int) {
	ret := _m.Called(c, id, user)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTasksById")
	}

	var r0 error
	var r1 int
	if rf, ok := ret.Get(0).(func(*gin.Context, primitive.ObjectID, Domain.OmitedUser) (error, int)); ok {
		return rf(c, id, user)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, primitive.ObjectID, Domain.OmitedUser) error); ok {
		r0 = rf(c, id, user)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, primitive.ObjectID, Domain.OmitedUser) int); ok {
		r1 = rf(c, id, user)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// GetAllTasks provides a mock function with given fields: c, loggedUser
func (_m *TaskUseCase) GetAllTasks(c *gin.Context, loggedUser Domain.OmitedUser) ([]*Domain.Task, error, int) {
	ret := _m.Called(c, loggedUser)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTasks")
	}

	var r0 []*Domain.Task
	var r1 error
	var r2 int
	if rf, ok := ret.Get(0).(func(*gin.Context, Domain.OmitedUser) ([]*Domain.Task, error, int)); ok {
		return rf(c, loggedUser)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, Domain.OmitedUser) []*Domain.Task); ok {
		r0 = rf(c, loggedUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, Domain.OmitedUser) error); ok {
		r1 = rf(c, loggedUser)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(*gin.Context, Domain.OmitedUser) int); ok {
		r2 = rf(c, loggedUser)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// GetTasksById provides a mock function with given fields: c, id, loggedUser
func (_m *TaskUseCase) GetTasksById(c *gin.Context, id primitive.ObjectID, loggedUser Domain.OmitedUser) (Domain.Task, error, int) {
	ret := _m.Called(c, id, loggedUser)

	if len(ret) == 0 {
		panic("no return value specified for GetTasksById")
	}

	var r0 Domain.Task
	var r1 error
	var r2 int
	if rf, ok := ret.Get(0).(func(*gin.Context, primitive.ObjectID, Domain.OmitedUser) (Domain.Task, error, int)); ok {
		return rf(c, id, loggedUser)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, primitive.ObjectID, Domain.OmitedUser) Domain.Task); ok {
		r0 = rf(c, id, loggedUser)
	} else {
		r0 = ret.Get(0).(Domain.Task)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, primitive.ObjectID, Domain.OmitedUser) error); ok {
		r1 = rf(c, id, loggedUser)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(*gin.Context, primitive.ObjectID, Domain.OmitedUser) int); ok {
		r2 = rf(c, id, loggedUser)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// UpdateTasksById provides a mock function with given fields: c, id, task, loggedUser
func (_m *TaskUseCase) UpdateTasksById(c *gin.Context, id primitive.ObjectID, task Domain.Task, loggedUser Domain.OmitedUser) (Domain.Task, error, int) {
	ret := _m.Called(c, id, task, loggedUser)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTasksById")
	}

	var r0 Domain.Task
	var r1 error
	var r2 int
	if rf, ok := ret.Get(0).(func(*gin.Context, primitive.ObjectID, Domain.Task, Domain.OmitedUser) (Domain.Task, error, int)); ok {
		return rf(c, id, task, loggedUser)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, primitive.ObjectID, Domain.Task, Domain.OmitedUser) Domain.Task); ok {
		r0 = rf(c, id, task, loggedUser)
	} else {
		r0 = ret.Get(0).(Domain.Task)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, primitive.ObjectID, Domain.Task, Domain.OmitedUser) error); ok {
		r1 = rf(c, id, task, loggedUser)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(*gin.Context, primitive.ObjectID, Domain.Task, Domain.OmitedUser) int); ok {
		r2 = rf(c, id, task, loggedUser)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// NewTaskUseCase creates a new instance of TaskUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskUseCase {
	mock := &TaskUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
