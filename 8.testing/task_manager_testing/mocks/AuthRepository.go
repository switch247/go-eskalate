// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"
	Domain "main/Domain"

	mock "github.com/stretchr/testify/mock"
)

// AuthRepository is an autogenerated mock type for the AuthRepository type
type AuthRepository struct {
	mock.Mock
}

// Login provides a mock function with given fields: ctx, user
func (_m *AuthRepository) Login(ctx context.Context, user *Domain.User) (string, error, int) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 error
	var r2 int
	if rf, ok := ret.Get(0).(func(context.Context, *Domain.User) (string, error, int)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *Domain.User) string); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *Domain.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *Domain.User) int); ok {
		r2 = rf(ctx, user)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// Register provides a mock function with given fields: ctx, user
func (_m *AuthRepository) Register(ctx context.Context, user *Domain.User) (Domain.OmitedUser, error, int) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 Domain.OmitedUser
	var r1 error
	var r2 int
	if rf, ok := ret.Get(0).(func(context.Context, *Domain.User) (Domain.OmitedUser, error, int)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *Domain.User) Domain.OmitedUser); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(Domain.OmitedUser)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *Domain.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *Domain.User) int); ok {
		r2 = rf(ctx, user)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// NewAuthRepository creates a new instance of AuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthRepository {
	mock := &AuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
